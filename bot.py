import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
import asyncio
from uuid import uuid4
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
from logger_config import setup_logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
bot_username = None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserState(StatesGroup):
    waiting_for_anon_message = State()
    waiting_for_admin_id = State()
    waiting_for_ban_duration = State()  # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        with sqlite3.connect('bot.db') as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS users 
                         (user_id INTEGER PRIMARY KEY, unique_link TEXT UNIQUE)''')
            c.execute('''CREATE TABLE IF NOT EXISTS messages 
                         (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                          link_owner_id INTEGER, 
                          sender_id INTEGER,
                          message TEXT, 
                          is_reported INTEGER DEFAULT 0)''')
            c.execute('''CREATE TABLE IF NOT EXISTS admins 
                         (admin_id INTEGER PRIMARY KEY)''')
            c.execute('''CREATE TABLE IF NOT EXISTS blocked_users 
                         (user_id INTEGER PRIMARY KEY, ban_until TEXT)''')
            c.execute("PRAGMA table_info(blocked_users)")
            columns = [col[1] for col in c.fetchall()]
            if 'ban_until' not in columns:
                c.execute("ALTER TABLE blocked_users ADD COLUMN ban_until TEXT")
                logger.info("Added column 'ban_until' to blocked_users table")
            c.execute("INSERT OR IGNORE INTO admins (admin_id) VALUES (?)", (ADMIN_ID,))
    except sqlite3.Error as e:
        logger.error(f"Database initialization error: {e}")
        raise

def is_admin(user_id):
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT admin_id FROM admins WHERE admin_id=?", (user_id,))
        return c.fetchone() is not None

def add_admin(admin_id):
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO admins (admin_id) VALUES (?)", (admin_id,))

def remove_admin(admin_id):
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("DELETE FROM admins WHERE admin_id=?", (admin_id,))

def get_admins():
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT admin_id FROM admins")
        return [row[0] for row in c.fetchall()]

def is_user_blocked(user_id):
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT ban_until FROM blocked_users WHERE user_id=?", (user_id,))
        result = c.fetchone()
        if result and result[0]:
            ban_until = datetime.fromisoformat(result[0])
            if datetime.now() > ban_until:
                unblock_user(user_id)
                return False
            return True
        return False

def block_user(user_id, duration_hours):
    if is_admin(user_id):
        return False
    
    ban_until = (datetime.now() + timedelta(hours=duration_hours)).isoformat()
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO blocked_users (user_id, ban_until) VALUES (?, ?)", 
                  (user_id, ban_until))

def unblock_user(user_id):
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("DELETE FROM blocked_users WHERE user_id=?", (user_id,))
    asyncio.create_task(notify_unblock(user_id))

async def notify_unblock(user_id):
    try:
        await bot.send_message(user_id, "<b>‚úÖ –í–∞—à –±–∞–Ω –∏—Å—Ç—ë–∫</b>, –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
    except TelegramBadRequest as e:
        logger.error(f"Failed to notify user {user_id} about unblock: {e}")

def get_blocked_users():
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT user_id, ban_until FROM blocked_users")
        return c.fetchall()

def get_reported_messages():
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT id, link_owner_id, sender_id, message FROM messages WHERE is_reported=1")
        return c.fetchall()

def get_or_create_user_link(user_id):
    try:
        with sqlite3.connect('bot.db') as conn:
            c = conn.cursor()
            c.execute("SELECT unique_link FROM users WHERE user_id=?", (user_id,))
            result = c.fetchone()
            if not result:
                unique_link = str(uuid4()).replace('-', '')
                c.execute("INSERT INTO users (user_id, unique_link) VALUES (?, ?)", (user_id, unique_link))
            else:
                unique_link = result[0]
            return unique_link
    except sqlite3.Error as e:
        logger.error(f"Database error in get_or_create_user_link: {e}")
        return None

def get_link_owner(unique_link):
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT user_id FROM users WHERE unique_link=?", (unique_link,))
        result = c.fetchone()
        return result[0] if result else None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu(is_admin=False):
    builder = InlineKeyboardBuilder()
    builder.button(text="üìé –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É", callback_data="get_link")
    if is_admin:
        builder.button(text="üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    builder.adjust(1)
    return builder.as_markup()

def get_report_button(msg_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{msg_id}")
    return builder.as_markup()

def get_admin_panel():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", callback_data="list_blocked")
    builder.button(text="üì© –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±", callback_data="list_reports")
    builder.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="manage_admins")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_ban_duration_panel(sender_id, msg_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="1 —á–∞—Å", callback_data=f"ban_{sender_id}_{msg_id}_1")
    builder.button(text="24 —á–∞—Å–∞", callback_data=f"ban_{sender_id}_{msg_id}_24")
    builder.button(text="7 –¥–Ω–µ–π", callback_data=f"ban_{sender_id}_{msg_id}_168")
    builder.button(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"ban_{sender_id}_{msg_id}_0")
    builder.button(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore_{msg_id}")
    builder.adjust(2)
    return builder.as_markup()

def get_edit_ban_duration_panel(user_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="1 —á–∞—Å", callback_data=f"edit_ban_duration_{user_id}_1")
    builder.button(text="24 —á–∞—Å–∞", callback_data=f"edit_ban_duration_{user_id}_24")
    builder.button(text="7 –¥–Ω–µ–π", callback_data=f"edit_ban_duration_{user_id}_168")
    builder.button(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"edit_ban_duration_{user_id}_0")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"manage_{user_id}")
    builder.adjust(2)
    return builder.as_markup()

def get_blocked_user_panel(user_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫", callback_data=f"edit_ban_{user_id}")
    builder.button(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_blocked")
    builder.adjust(1)
    return builder.as_markup()

def get_admin_list_keyboard():
    builder = InlineKeyboardBuilder()
    admins = get_admins()
    for admin_id in admins:
        builder.button(text=f"–£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"remove_admin_{admin_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    try:
        global bot_username
        args = message.text.split()
        user_id = message.from_user.id
        
        if is_user_blocked(user_id):
            await message.answer("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
            return
            
        if len(args) == 1:
            try:
                unique_link = get_or_create_user_link(user_id)
                if not unique_link:
                    await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏</b>")
                    return
                    
                link = f"https://t.me/{bot_username}?start={unique_link}"
                admin_hint = "<b>–í—ã –∞–¥–º–∏–Ω.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_admin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤." if is_admin(user_id) else ""
                text = (
                    f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <a href='{link}'>{link}</a>\n\n"
                    f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏!\n\n"
                    f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
                    f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏\n"
                    f"‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    f"‚Ä¢ –ñ–∞–ª—É–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
                    f"{admin_hint}"
                )
                await message.answer(text, reply_markup=get_main_menu(is_admin(user_id)), 
                                  disable_web_page_preview=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
                await message.answer("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã</b>")
        else:
            try:
                unique_link = args[1]
                owner_id = get_link_owner(unique_link)
                if owner_id:
                    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                    await state.set_state(UserState.waiting_for_anon_message)
                    await state.update_data(owner_id=owner_id)
                else:
                    await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞", 
                                      reply_markup=get_main_menu(is_admin(user_id)))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
                await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏</b>")
                await state.clear()
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        await message.answer("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>")
        await state.clear()

@dp.message(UserState.waiting_for_anon_message)
async def process_message(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        if is_user_blocked(user_id):
            await message.answer("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")
            await state.clear()
            return
        data = await state.get_data()
        owner_id = data.get("owner_id")
        
        try:
            with sqlite3.connect('bot.db') as conn:
                c = conn.cursor()
                c.execute("INSERT INTO messages (link_owner_id, sender_id, message) VALUES (?, ?, ?)",
                          (owner_id, user_id, message.text))
                msg_id = c.lastrowid
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>")
            return

        try:
            await bot.send_message(owner_id, f"<b>‚ú® –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}", 
                                 reply_markup=get_report_button(msg_id))
        except TelegramBadRequest as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é {owner_id}: {e}")
            # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–î, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            with sqlite3.connect('bot.db') as conn:
                c = conn.cursor()
                c.execute("DELETE FROM messages WHERE id=?", (msg_id,))
            await message.answer("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é</b>")
            return

        await message.answer("<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>", reply_markup=get_main_menu(is_admin(user_id)))
        await state.clear()
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_message: {e}")
        await message.answer("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>")
        await state.clear()

@dp.callback_query(lambda c: c.data == "get_link")
async def get_link(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    unique_link = get_or_create_user_link(user_id)
    link = f"https://t.me/{bot_username}?start={unique_link}"
    text = f"üìé –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<a href='{link}'>{link}</a>"
    await call.message.answer(text, reply_markup=get_main_menu(is_admin(user_id)), disable_web_page_preview=True)
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("report_"))
async def process_report(call: types.CallbackQuery):
    try:
        msg_id = int(call.data.split("_")[1])
        try:
            with sqlite3.connect('bot.db') as conn:
                c = conn.cursor()
                c.execute("SELECT link_owner_id, sender_id, message FROM messages WHERE id=?", (msg_id,))
                result = c.fetchone()
                c.execute("UPDATE messages SET is_reported=1 WHERE id=?", (msg_id,))
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}):  {e}")
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã", show_alert=True)
            return

        if result:
            owner_id, sender_id, reported_message = result
            notification_text = (
                f"<b>üö® –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!</b>\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü —Å—Å—ã–ª–∫–∏: {owner_id}\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_id}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {reported_message}"
            )
            
            notification_sent = False
            for admin_id in get_admins():
                try:
                    await bot.send_message(admin_id, notification_text, 
                                         reply_markup=get_ban_duration_panel(sender_id, msg_id))
                    notification_sent = True
                except TelegramBadRequest as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
                    
            if not notification_sent:
                await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
                return

        await call.message.edit_text("<b>‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>", 
                                   reply_markup=get_main_menu(is_admin(call.from_user.id)))
        await call.answer()
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("ban_"))
async def handle_ban(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    parts = call.data.split("_")
    user_id, msg_id, duration = int(parts[1]), int(parts[2]), int(parts[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if is_admin(user_id):
        await call.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
        
    duration_hours = duration if duration > 0 else 999999
    ban_until = datetime.now() + timedelta(hours=duration_hours)
    block_user(user_id, duration_hours)
    
    if duration > 0:
        duration_text = f"{duration} —á–∞—Å(–æ–≤), –¥–æ {ban_until.strftime('%Y-%m-%d %H:%M')}"
    else:
        duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    
    text = f"<b>üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_text}"
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("DELETE FROM messages WHERE id=?", (msg_id,))
    
    await call.message.edit_text(text)
    await call.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_text}")
    
    try:
        await bot.send_message(user_id, f"<b>üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –Ω–∞ {duration_text}")
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –±–∞–Ω–µ: {e}")

@dp.callback_query(lambda c: c.data.startswith("ignore_"))
async def ignore_report(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    msg_id = int(call.data.split("_")[1])
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("DELETE FROM messages WHERE id=?", (msg_id,))
    await call.message.edit_text("<b>‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞</b>")
    await call.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")

@dp.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    if not is_admin(user_id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    text = "<b>üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>"
    await call.message.edit_text(text, reply_markup=get_admin_panel())
    await call.answer()

@dp.callback_query(lambda c: c.data == "list_blocked")
async def list_blocked(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    if not is_admin(user_id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    blocked = get_blocked_users()
    if not blocked:
        text = "<b>üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç</b>"
    else:
        text = "<b>üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        for user_id, ban_until in blocked:
            ban_until_dt = datetime.fromisoformat(ban_until)
            remaining = ban_until_dt - datetime.now()
            remaining_text = f"–¥–æ {ban_until_dt.strftime('%Y-%m-%d %H:%M')}" if remaining.total_seconds() > 0 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
            text += f"‚Ä¢ {user_id} - {remaining_text}\n"
    builder = InlineKeyboardBuilder()
    for user_id, _ in blocked:
        builder.button(text=f"üë§ {user_id}", callback_data=f"manage_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    builder.adjust(1)
    await call.message.edit_text(text, reply_markup=builder.as_markup())
    await call.answer()

@dp.callback_query(lambda c: c.data == "list_reports")
async def list_reports(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    if not is_admin(user_id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    reports = get_reported_messages()
    if not reports:
        text = "<b>üì© –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–± –ø—É—Å—Ç</b>"
    else:
        text = "<b>üì© –ñ–∞–ª–æ–±—ã:</b>\n"
        for msg_id, owner_id, sender_id, message in reports:
            truncated_message = message[:50] + "..." if len(message) > 50 else message
            text += f"ID: {msg_id} | –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_id} | –í–ª–∞–¥–µ–ª–µ—Ü: {owner_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {truncated_message}\n"
    builder = InlineKeyboardBuilder()
    for msg_id, _, sender_id, _ in reports:
        builder.button(text=f"üì© {msg_id}", callback_data=f"manage_report_{sender_id}_{msg_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
    builder.adjust(1)
    await call.message.edit_text(text, reply_markup=builder.as_markup())
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("manage_report_"))
async def manage_report(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    if not is_admin(user_id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    parts = call.data.split("_")
    sender_id, msg_id = int(parts[2]), int(parts[3])
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT link_owner_id, message FROM messages WHERE id=?", (msg_id,))
        result = c.fetchone()
    if result:
        owner_id, message = result
        text = (
            f"<b>üì© –ñ–∞–ª–æ–±–∞ ID: {msg_id}</b>\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü —Å—Å—ã–ª–∫–∏: {owner_id}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_id}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
        )
    else:
        text = f"<b>üì© –ñ–∞–ª–æ–±–∞ ID: {msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>"
    await call.message.edit_text(text, reply_markup=get_ban_duration_panel(sender_id, msg_id))
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("manage_") and c.data.split("_")[1].isdigit())
async def manage_blocked(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    if not is_admin(user_id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    blocked_user_id = int(call.data.split("_")[1])
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute("SELECT ban_until FROM blocked_users WHERE user_id=?", (blocked_user_id,))
        result = c.fetchone()
    if result:
        ban_until = datetime.fromisoformat(result[0])
        remaining = ban_until - datetime.now()
        remaining_text = f"–¥–æ {ban_until.strftime('%Y-%m-%d %H:%M')}" if remaining.total_seconds() > 0 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        text = f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blocked_user_id}</b>\n–°—Ä–æ–∫ –±–∞–Ω–∞: {remaining_text}"
    else:
        text = f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blocked_user_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
    await call.message.edit_text(text, reply_markup=get_blocked_user_panel(blocked_user_id))
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_ban_") and len(c.data.split("_")) == 3)
async def edit_ban(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    user_id = int(call.data.split("_")[2])
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –±–∞–Ω–∞ –¥–ª—è <b>{user_id}</b>:"
    await call.message.edit_text(text, reply_markup=get_edit_ban_duration_panel(user_id))
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_ban_duration_") and len(c.data.split("_")) == 5)
async def handle_edit_ban_duration(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    parts = call.data.split("_")
    user_id, duration = int(parts[3]), int(parts[4])

    

    duration_hours = duration if duration > 0 else 999999
    ban_until = datetime.now() + timedelta(hours=duration_hours)
    
    if duration > 0:
        duration_text = f"{duration} —á–∞—Å(–æ–≤), –¥–æ {ban_until.strftime('%Y-%m-%d %H:%M')}"
    else:
        duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    
    block_user(user_id, duration_hours)
    text = f"<b>üö´ –°—Ä–æ–∫ –±–∞–Ω–∞ –¥–ª—è {user_id}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {duration_text}"
    await call.message.edit_text(text, reply_markup=get_blocked_user_panel(user_id))
    await call.answer(f"‚úÖ –°—Ä–æ–∫ –±–∞–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {duration_text}")
    
    try:
        await bot.send_message(user_id, f"<b>üö´ –í–∞—à —Å—Ä–æ–∫ –±–∞–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞ {duration_text}")
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –Ω–æ–≤–æ–º —Å—Ä–æ–∫–µ –±–∞–Ω–∞: {e}")

@dp.message(UserState.waiting_for_ban_duration)  # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
async def process_ban_duration(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!</b>")
        await state.clear()
        return
    try:
        duration = int(message.text)
        if duration < 0:
            raise ValueError("–°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        data = await state.get_data()
        user_id = data.get("user_id")
        duration_hours = duration if duration > 0 else 999999
        block_user(user_id, duration_hours)
        duration_text = f"{duration} —á–∞—Å(–æ–≤)" if duration > 0 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        text = f"<b>üö´ –°—Ä–æ–∫ –±–∞–Ω–∞ –¥–ª—è {user_id}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {duration_text}"
        await message.answer(text, reply_markup=get_main_menu(True))
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (0 –∏–ª–∏ –±–æ–ª—å—à–µ)!")

@dp.callback_query(lambda c: c.data.startswith("unblock_"))
async def unblock(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    user_id = int(call.data.split("_")[1])
    unblock_user(user_id)
    text = f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>"
    await call.message.edit_text(text)
    await call.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

@dp.callback_query(lambda c: c.data == "manage_admins")
async def manage_admins(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        await call.answer()
        return
    if not is_admin(user_id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    admins = get_admins()
    if len(admins) <= 1:
        text = "<b>üë• –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>"
    else:
        text = "<b>üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n" + "\n".join(f"‚Ä¢ {admin_id}" for admin_id in admins)
    await call.message.edit_text(text, reply_markup=get_admin_list_keyboard())
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("remove_admin_"))
async def remove_admin_handler(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    admin_id = int(call.data.split("_")[2])
    admins = get_admins()
    if len(admins) <= 1:
        await call.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    if admin_id == call.from_user.id:
        await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è!", show_alert=True)
        return
    if admin_id not in admins:
        await call.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", show_alert=True)
        return
    remove_admin(admin_id)
    text = f"<b>üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª—ë–Ω</b>"
    await call.message.edit_text(text, reply_markup=get_admin_list_keyboard())
    await call.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª—ë–Ω")

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        await call.message.edit_text("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        return
    unique_link = get_or_create_user_link(user_id)
    link = f"https://t.me/{bot_username}?start={unique_link}"
    text = f"üìé –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<a href='{link}'>{link}</a>"
    await call.message.edit_text(text, reply_markup=get_main_menu(is_admin(user_id)), disable_web_page_preview=True)
    await call.answer()

def get_cancel_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")
    return builder.as_markup()


@dp.message(Command("add_admin"))
async def add_admin_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ):", reply_markup=get_cancel_button())
        await state.set_state(UserState.waiting_for_admin_id)
    else:
        try:
            new_admin_id = int(args[1])
            await process_add_admin_direct(message, new_admin_id)
        except ValueError:
            await message.answer("<b>–û—à–∏–±–∫–∞:</b> ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

@dp.callback_query(lambda c: c.data == "cancel_input")
async def cancel_input(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id
    unique_link = get_or_create_user_link(user_id)
    link = f"https://t.me/{bot_username}?start={unique_link}"
    text =f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <a href='{link}'>{link}</a>"
    await call.message.edit_text(text, reply_markup=get_main_menu(is_admin(user_id)), disable_web_page_preview=True)
    await call.answer()

@dp.message(UserState.waiting_for_admin_id)
async def process_add_admin(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    try:
        new_admin_id = int(message.text)
        await process_add_admin_direct(message, new_admin_id)
        await state.clear()
    except ValueError:
        await message.answer("<b>–û—à–∏–±–∫–∞:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ)!", reply_markup=get_cancel_button())

async def process_add_admin_direct(message: types.Message, new_admin_id: int):
    if is_admin(new_admin_id):
        await message.answer("<b>‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>", reply_markup=get_main_menu(True))
    else:
        add_admin(new_admin_id)
        await message.answer(f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id}</b> –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_main_menu(True))
        try:
            await bot.send_message(new_admin_id, "<b>üë®‚Äçüíº –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!</b>")
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ {new_admin_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global bot_username
    init_db()
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    logger.info(f"–ë–æ—Ç {bot_username} –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
